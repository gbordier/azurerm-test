name: Load Configuration

on:
   push:
     branches:
       - main
     paths:
       - '.github/workflows/load-config.yml'
     inputs:
       config:
         description: "Name of the configuration to use"
         required: true
         type: string
         default: "gbordier"
   workflow_dispatch:
      inputs:
        config:
          required: true
          type: string
          default: "gbordier"
   workflow_call:
    inputs:
      config:
        description: "Name of the configuration to use"
        required: true
        type: string
        default: "gbordier"
    outputs:
      subscription_id:
        description: "Core Subscription ID"
        value: ${{ jobs.get_config.outputs.subscription_id }}
      resource_group_name:
        description: "Core Resource Group Name"
        value: ${{ jobs.get_config.outputs.resource_group_name }}
      location:
        description: "Core Location"
        value: ${{ jobs.get_config.outputs.location }}
      is_private_deployment:
        description: "True if this is a private deployment, false otherwise"
        value: ${{ jobs.get_config.outputs.is_private_deployment }}
      tenant_id:
        description: "Tenant ID"
        value: ${{ jobs.get_config.outputs.tenant_id }}
      client_id:
        description: "Client ID"
        value: ${{ jobs.get_config.outputs.client_id }}
  
env:
  PACKAGE_JSON: ""
jobs:
  get_config:
    name: Get configuration
    runs-on: ubuntu-latest
    outputs:
      subscription_id: ${{ fromJson(env.PACKAGE_JSON).subscription_id }}
      resource_group_name: ${{ fromJson(env.PACKAGE_JSON).resource_group_name }}
      tenant_id: ${{ fromJson(env.PACKAGE_JSON).tenant_id }}
      location: ${{ fromJson(env.PACKAGE_JSON).location }}
      is_private_deployment: ${{ fromJson(env.PACKAGE_JSON).is_private_deployment }}
      client_id: ${{ fromJson(env.PACKAGE_JSON).client_id }}
      
    steps:
    - uses: actions/checkout@v4

    - name: Get Core variables
      id: coreVariables
      shell: bash
      run: |
       config=${{ inputs.config }}
       if [ -z "${{ inputs.config }}" ]; then
         echo "No configuration specified defaulting to gbordier"
         config=gbordier
       fi
       if [ -z "$config" ]; then
         echo "No configuration specified"
         exit 1
       fi
       configfile=./variables/$config.parameters.json
       if [ ! -f ./variables/$config.parameters.json ]; then
         echo "Configuration file ./variables/$config.parameters.json not found"
         exit 1
       fi
       cat $configfile
       echo 'PACKAGE_JSON<<EOF' >> $GITHUB_ENV
       cat $configfile >> $GITHUB_ENV
       echo 'EOF' >> $GITHUB_ENV
    - name: define outputs
      id: define_outputs
      run: |
        for i in $(jq -r 'keys[]' <<< $PACKAGE_JSON); do
          name=$i
          value=$(jq -r .${i} <<< $PACKAGE_JSON)
          echo "${name}=${value}" >> $GITHUB_OUTPUT
          echo "defined output ${name}=${value}"
        done

